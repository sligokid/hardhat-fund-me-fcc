{
  "address": "0xdbDe84052c05076280599D3926937918f20bec93",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4092bb70ab8618038b5490084bffec13a67d260993c2d266c0dfe1288109f929",
  "receipt": {
    "to": null,
    "from": "0x59A41F642eE910a2fe331307EBC70D5699f5C859",
    "contractAddress": "0xdbDe84052c05076280599D3926937918f20bec93",
    "transactionIndex": 33,
    "gasUsed": "872111",
    "logsBloom": "0x
    "blockHash": "0x65a00255a2179ae4a923b68f2e7378d2ba780f1f1a38f14a73088e73ec74b620",
    "transactionHash": "0x4092bb70ab8618038b5490084bffec13a67d260993c2d266c0dfe1288109f929",
    "logs": [],
    "blockNumber": 8086531,
    "cumulativeGasUsed": "16198282",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e"
  ],
  "numDeployments": 1,
  "solcInputHash": "6a72c4a675c617dc40fa4b46d0d1bfaa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// Get funds from users\\n// Withdraw funds as owner of contract\\n// Set the minimum funding value in USD\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// my pricing libary\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// const, immutable - if you have a value outside of a function once and never changes, const much cheaper to use\\n\\n// cost: 809,984\\n// cost: 790,394\\n\\nerror NotOwner();\\n\\ncontract FundMe {\\n    // attach my pricing library to the type\\n    using PriceConverter for uint256;\\n\\n    // layer 2 source for pricing\\n    // const (21,415 gas) * 13000000000 = 278395000000000 =     0.000278395 eth = .33 USD\\n    // non-const (23,515 gas) * 13000000000 = 305695000000000 = 0.000305695000000000 =\\n    // call = 21,415 * 13000000000 = 278395000000000 = 0.000278395 eth = .33 USD\\n    mapping(address => uint256) public addressToAmountFunded;\\n    address[] public funders;\\n    address public immutable owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18; // Gwei\\n\\n    AggregatorV3Interface public priceFeed;\\n\\n    // gets called in the same tx as contract creation\\n    constructor(address priceFeedAddress) {\\n        owner = msg.sender;\\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    // payable turns the function red, this contract can receive wei from sender to store in its wallet\\n    function fund() public payable {\\n        // set the minimum fund amount to 1 ETH (1 * 10 ** 18) gwei, revert will rollback and send remaining gas back to sender\\n        require(\\n            msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\\n            \\\"Mininum value is not met..\\\"\\n        );\\n        funders.push(msg.sender);\\n        addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        // orange button b/c not payable\\n        // reset our funders totals\\n        for (uint256 i = 0; i < funders.length; i++) {\\n            address funder = funders[i];\\n            addressToAmountFunded[funder] = 0;\\n        }\\n        // reset the array with zero elements\\n        funders = new address[](0);\\n\\n        // There are 3 ways to send ETH / native tokens (we need to cast the senders addreess to payable address type)\\n        // see https://solidity-by-example.org/sending-ether/\\n        // 1. transfer will revert on fail, 2300 gas cap\\n        //payable(msg.sender).transfer(address(this).balance);\\n\\n        // 2. send will return bool on fail, so we need to add a require to revert on fail, 2300 gas cap\\n        //bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        //require(sendSuccess, \\\"Send failed\\\");\\n\\n        // 3. Recommended - call (a lower level command, can call any function in ethereum without ABI) returns 2 vars, no gas capp\\n        // since bytes objects are arrays dataReturned needs to be in memory - but we dont need it so leave empty\\n        // (bool callSuccess, bytes memory dataReturned) = ..\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    modifier onlyOwner() {\\n        //require(msg.sender == i_owner, \\\"Sender is not the owner\\\");\\n        if (msg.sender != owner) {\\n            revert NotOwner();\\n        }\\n        _; // now execute the rest of the code\\n    }\\n\\n    // if msg.data is empty call this\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    // if msg.data is empty and no recieve() / function missing call this\\n    fallback() external payable {\\n        fund();\\n    }\\n}\\n\",\"keccak256\":\"0x6653eb76ddff54fddec89aef8f29de99ef7f9cc0241f1c265e564cb5c7481017\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// cannot have any state and cannot send ether, and all functions are internal\\nlibrary PriceConverter {\\n    // convert ETH to USD on testnet using a chainlink oracle source\\n    function getPrice(\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        // ABI and Address of data source contract: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // price has 8 decimal places\\n        return uint256(price * 1e10); // 1 ** 10 = 10000000000\\n    }\\n\\n    function getVersion() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    // both price and amount are have 18 decimal places, 1st parameter is the object called (msg.value)\\n    function getConversionRate(\\n        uint256 _ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        // eg. 3000_000000000000000000\\n        // 1_00000000000000000\\n        uint256 ethAmountInUsd = (ethPrice * _ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x9398d07a264f2493356976e093f555e8b9193e541c90570e66163733c7b498ce\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405162000fcd38038062000fcd833981810160405281019061003491906100c7565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610142565b6000815190506100c18161012b565b92915050565b6000602082840312156100dd576100dc610126565b5b60006100eb848285016100b2565b91505092915050565b60006100ff82610106565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b610134816100f4565b811461013f57600080fd5b50565b60805160601c610e6562000168600039600081816102e501526105700152610e656000f3fe6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c5780638da5cb5b14610137578063b60d428814610162578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107bd565b610523565b6040516100d891906109b3565b60405180910390f35b3480156100ed57600080fd5b506100f661053b565b60405161010391906109b3565b60405180910390f35b34801561011857600080fd5b50610121610548565b60405161012e9190610958565b60405180910390f35b34801561014357600080fd5b5061014c61056e565b604051610159919061093d565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e91906107ea565b610592565b6040516101a0919061093d565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d190919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610993565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102da91906109ea565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610368576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104135760006001828154811061038e5761038d610d1b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040b90610c74565b91505061036b565b50600067ffffffffffffffff81111561042f5761042e610d4a565b5b60405190808252806020026020018201604052801561045d5781602001602082028036833780820191505090505b50600190805190602001906104739291906106ad565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049a90610928565b60006040518083038185875af1925050503d80600081146104d7576040519150601f19603f3d011682016040523d82523d6000602084013e6104dc565b606091505b5050905080610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790610973565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181815481106105a257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105dd8361060d565b90506000670de0b6b3a764000085836105f69190610b88565b6106009190610a40565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065657600080fd5b505afa15801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610817565b5050509150506402540be400816106a59190610a71565b915050919050565b828054828255906000526020600020908101928215610726579160200282015b828111156107255782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106cd565b5b5090506107339190610737565b5090565b5b80821115610750576000816000905550600101610738565b5090565b60008135905061076381610dd3565b92915050565b60008151905061077881610dea565b92915050565b60008135905061078d81610e01565b92915050565b6000815190506107a281610e01565b92915050565b6000815190506107b781610e18565b92915050565b6000602082840312156107d3576107d2610d79565b5b60006107e184828501610754565b91505092915050565b600060208284031215610800576107ff610d79565b5b600061080e8482850161077e565b91505092915050565b600080600080600060a0868803121561083357610832610d79565b5b6000610841888289016107a8565b955050602061085288828901610769565b945050604061086388828901610793565b935050606061087488828901610793565b9250506080610885888289016107a8565b9150509295509295909350565b61089b81610be2565b82525050565b6108aa81610c3e565b82525050565b60006108bd600b836109d9565b91506108c882610d7e565b602082019050919050565b60006108e0601a836109d9565b91506108eb82610da7565b602082019050919050565b60006109036000836109ce565b915061090e82610dd0565b600082019050919050565b61092281610c1e565b82525050565b6000610933826108f6565b9150819050919050565b60006020820190506109526000830184610892565b92915050565b600060208201905061096d60008301846108a1565b92915050565b6000602082019050818103600083015261098c816108b0565b9050919050565b600060208201905081810360008301526109ac816108d3565b9050919050565b60006020820190506109c86000830184610919565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109f582610c1e565b9150610a0083610c1e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3557610a34610cbd565b5b828201905092915050565b6000610a4b82610c1e565b9150610a5683610c1e565b925082610a6657610a65610cec565b5b828204905092915050565b6000610a7c82610bf4565b9150610a8783610bf4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ac657610ac5610cbd565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610b0357610b02610cbd565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610b4057610b3f610cbd565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610b7d57610b7c610cbd565b5b828202905092915050565b6000610b9382610c1e565b9150610b9e83610c1e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bd757610bd6610cbd565b5b828202905092915050565b6000610bed82610bfe565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610c4982610c50565b9050919050565b6000610c5b82610c62565b9050919050565b6000610c6d82610bfe565b9050919050565b6000610c7f82610c1e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cb257610cb1610cbd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f4d696e696e756d2076616c7565206973206e6f74206d65742e2e000000000000600082015250565b50565b610ddc81610be2565b8114610de757600080fd5b50565b610df381610bf4565b8114610dfe57600080fd5b50565b610e0a81610c1e565b8114610e1557600080fd5b50565b610e2181610c28565b8114610e2c57600080fd5b5056fea2646970667358221220b2592886ecf2f2e4950718e345071a04dca449faeafcf4d9de7a5e40797b235864736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063741bef1a1161004e578063741bef1a1461010c5780638da5cb5b14610137578063b60d428814610162578063dc0d3dff1461016c57610083565b80633ccfd60b1461008d5780633e47d6f3146100a45780636b69a592146100e157610083565b36610083576100816101a9565b005b61008b6101a9565b005b34801561009957600080fd5b506100a26102e3565b005b3480156100b057600080fd5b506100cb60048036038101906100c691906107bd565b610523565b6040516100d891906109b3565b60405180910390f35b3480156100ed57600080fd5b506100f661053b565b60405161010391906109b3565b60405180910390f35b34801561011857600080fd5b50610121610548565b60405161012e9190610958565b60405180910390f35b34801561014357600080fd5b5061014c61056e565b604051610159919061093d565b60405180910390f35b61016a6101a9565b005b34801561017857600080fd5b50610193600480360381019061018e91906107ea565b610592565b6040516101a0919061093d565b60405180910390f35b6802b5e3af16b18800006101e8600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346105d190919063ffffffff16565b1015610229576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022090610993565b60405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102da91906109ea565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610368576040517f30cd747100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156104135760006001828154811061038e5761038d610d1b565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061040b90610c74565b91505061036b565b50600067ffffffffffffffff81111561042f5761042e610d4a565b5b60405190808252806020026020018201604052801561045d5781602001602082028036833780820191505090505b50600190805190602001906104739291906106ad565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161049a90610928565b60006040518083038185875af1925050503d80600081146104d7576040519150601f19603f3d011682016040523d82523d6000602084013e6104dc565b606091505b5050905080610520576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161051790610973565b60405180910390fd5b50565b60006020528060005260406000206000915090505481565b6802b5e3af16b188000081565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181815481106105a257600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806105dd8361060d565b90506000670de0b6b3a764000085836105f69190610b88565b6106009190610a40565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561065657600080fd5b505afa15801561066a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061068e9190610817565b5050509150506402540be400816106a59190610a71565b915050919050565b828054828255906000526020600020908101928215610726579160200282015b828111156107255782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906106cd565b5b5090506107339190610737565b5090565b5b80821115610750576000816000905550600101610738565b5090565b60008135905061076381610dd3565b92915050565b60008151905061077881610dea565b92915050565b60008135905061078d81610e01565b92915050565b6000815190506107a281610e01565b92915050565b6000815190506107b781610e18565b92915050565b6000602082840312156107d3576107d2610d79565b5b60006107e184828501610754565b91505092915050565b600060208284031215610800576107ff610d79565b5b600061080e8482850161077e565b91505092915050565b600080600080600060a0868803121561083357610832610d79565b5b6000610841888289016107a8565b955050602061085288828901610769565b945050604061086388828901610793565b935050606061087488828901610793565b9250506080610885888289016107a8565b9150509295509295909350565b61089b81610be2565b82525050565b6108aa81610c3e565b82525050565b60006108bd600b836109d9565b91506108c882610d7e565b602082019050919050565b60006108e0601a836109d9565b91506108eb82610da7565b602082019050919050565b60006109036000836109ce565b915061090e82610dd0565b600082019050919050565b61092281610c1e565b82525050565b6000610933826108f6565b9150819050919050565b60006020820190506109526000830184610892565b92915050565b600060208201905061096d60008301846108a1565b92915050565b6000602082019050818103600083015261098c816108b0565b9050919050565b600060208201905081810360008301526109ac816108d3565b9050919050565b60006020820190506109c86000830184610919565b92915050565b600081905092915050565b600082825260208201905092915050565b60006109f582610c1e565b9150610a0083610c1e565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610a3557610a34610cbd565b5b828201905092915050565b6000610a4b82610c1e565b9150610a5683610c1e565b925082610a6657610a65610cec565b5b828204905092915050565b6000610a7c82610bf4565b9150610a8783610bf4565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482116000841360008413161615610ac657610ac5610cbd565b5b817f80000000000000000000000000000000000000000000000000000000000000000583126000841260008413161615610b0357610b02610cbd565b5b827f80000000000000000000000000000000000000000000000000000000000000000582126000841360008412161615610b4057610b3f610cbd565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0582126000841260008412161615610b7d57610b7c610cbd565b5b828202905092915050565b6000610b9382610c1e565b9150610b9e83610c1e565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bd757610bd6610cbd565b5b828202905092915050565b6000610bed82610bfe565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600069ffffffffffffffffffff82169050919050565b6000610c4982610c50565b9050919050565b6000610c5b82610c62565b9050919050565b6000610c6d82610bfe565b9050919050565b6000610c7f82610c1e565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cb257610cb1610cbd565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b7f4d696e696e756d2076616c7565206973206e6f74206d65742e2e000000000000600082015250565b50565b610ddc81610be2565b8114610de757600080fd5b50565b610df381610bf4565b8114610dfe57600080fd5b50565b610e0a81610c1e565b8114610e1557600080fd5b50565b610e2181610c28565b8114610e2c57600080fd5b5056fea2646970667358221220b2592886ecf2f2e4950718e345071a04dca449faeafcf4d9de7a5e40797b235864736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 60,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}