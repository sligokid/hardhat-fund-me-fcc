{
    "language": "Solidity",
    "sources": {
        "contracts/FundMe.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\nimport \"./PriceConverter.sol\";\n\nerror FundMe__NotOwner();\n\n/** @title A contract for crowd funding\n *  @author Kieran Mc Gowan\n *  @notice This contract is to demo a sample funding contract\n *  @dev This implements price feeds as our library\n */\ncontract FundMe {\n    // Type declarations\n    using PriceConverter for uint256;\n\n    // State variables\n    mapping(address => uint256) private s_addressToAmountFunded;\n    address[] private s_funders;\n    address private immutable i_owner;\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18; // Gwei\n    AggregatorV3Interface private s_priceFeed;\n\n    // Events and modifers\n    modifier onlyOwner() {\n        if (msg.sender != i_owner) {\n            revert FundMe__NotOwner();\n        }\n        _; // now execute the rest of the code\n    }\n\n    // Functions - constructor\n    constructor(address priceFeedAddress) {\n        i_owner = msg.sender;\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\n    }\n\n    // Functions - receive and callbacks\n    function fund() public payable {\n        require(\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\n            \"You need to send more ETH!\"\n        );\n        s_addressToAmountFunded[msg.sender] += msg.value;\n        s_funders.push(msg.sender);\n    }\n\n    function withdraw() public onlyOwner {\n        // reset our funders totals\n        for (uint256 i = 0; i < s_funders.length; i++) {\n            address funder = s_funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        // reset the array with zero elements\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: address(this).balance\n        }(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function withdrawCheaperGas() public onlyOwner {\n        address[] memory funders = s_funders;\n\n        // reset our funders totals\n        for (uint256 i = 0; i < funders.length; i++) {\n            address funder = funders[i];\n            s_addressToAmountFunded[funder] = 0;\n        }\n        // reset the array with zero elements\n        s_funders = new address[](0);\n\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\"\");\n        require(callSuccess, \"Call failed\");\n    }\n\n    function getOwner() public view returns (address) {\n        return i_owner;\n    }\n\n    function getFunder(uint256 index) public view returns (address) {\n        return s_funders[index];\n    }\n\n    function getAmountFunded(address funder) public view returns (uint256) {\n        return s_addressToAmountFunded[funder];\n    }\n\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\n        return s_priceFeed;\n    }\n}\n"
        },
        "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
            "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
        },
        "contracts/PriceConverter.sol": {
            "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n// cannot have any state and cannot send ether, and all functions are internal\nlibrary PriceConverter {\n    // convert ETH to USD on testnet using a chainlink oracle source\n    function getPrice(\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        // ABI and Address of data source contract: 0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        (, int256 price, , , ) = priceFeed.latestRoundData(); // price has 8 decimal places\n        return uint256(price * 1e10); // 1 ** 10 = 10000000000\n    }\n\n    function getVersion() internal view returns (uint256) {\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n        );\n        return priceFeed.version();\n    }\n\n    // both price and amount are have 18 decimal places, 1st parameter is the object called (msg.value)\n    function getConversionRate(\n        uint256 _ethAmount,\n        AggregatorV3Interface priceFeed\n    ) internal view returns (uint256) {\n        uint256 ethPrice = getPrice(priceFeed);\n        // eg. 3000_000000000000000000\n        // 1_00000000000000000\n        uint256 ethAmountInUsd = (ethPrice * _ethAmount) / 1e18;\n        return ethAmountInUsd;\n    }\n}\n"
        }
    },
    "settings": {
        "optimizer": {
            "enabled": false,
            "runs": 200
        },
        "outputSelection": {
            "*": {
                "*": [
                    "abi",
                    "evm.bytecode",
                    "evm.deployedBytecode",
                    "evm.methodIdentifiers",
                    "metadata",
                    "devdoc",
                    "userdoc",
                    "storageLayout",
                    "evm.gasEstimates"
                ],
                "": ["ast"]
            }
        },
        "metadata": {
            "useLiteralContent": true
        }
    }
}
